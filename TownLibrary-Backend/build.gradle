plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'	// for code coverage

	// This allows the task jacocoTestReport to report all coverage ratios
	// supported by jacoco (it will actually print it out)
	id 'org.barfuin.gradle.jacocolog' version '2.0.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.mockito:mockito-core:2.+'
	testImplementation 'io.rest-assured:spring-mock-mvc:4.4.0' // for integration tests in junit
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-params' // for parameterized tests

	// Stuff specific to the local profile -- specified by
	// application-local.properties -- such as:
	// *  using a local in-memory database instead of heroku.
	//
	// Can be launched by using your favorite IDE or by adding
	// `SPRING_PROFILES_ACTIVE=local` before the gradle command:
	// `SPRING_PROFILES_ACTIVE=local ./gradlew test` for example.
	runtimeOnly 'com.h2database:h2:1.4.200'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

task jacocoPersistenceTestReport(type: JacocoReport) {
	reports { html.required = true }
	afterEvaluate {
		executionData(file("$buildDir/jacoco/persistenceTest.exec"))
		sourceDirectories.setFrom(project.sourceSets.main.java.srcDirs)
		classDirectories.setFrom(files(
			"$buildDir/classes/java/main/ca/mcgill/ecse321/townlibrary/model/",
			"$buildDir/classes/java/main/ca/mcgill/ecse321/townlibrary/repository/"))
	}
}

task persistenceTest(type: Test) {
	useJUnitPlatform()

	filter {
		includeTestsMatching "ca.mcgill.ecse321.townlibrary.TownLibraryApplicationTests"
		includeTestsMatching "ca.mcgill.ecse321.townlibrary.model.*"
		includeTestsMatching "ca.mcgill.ecse321.townlibrary.repository.*"
	}

	finalizedBy jacocoPersistenceTestReport
}

task jacocoUnitTestReport(type: JacocoReport) {
	reports { html.required = true }
	afterEvaluate {
		executionData(file("$buildDir/jacoco/unitTest.exec"))
		sourceDirectories.setFrom(project.sourceSets.main.java.srcDirs)
		classDirectories.setFrom(files(
			"$buildDir/classes/java/main/ca/mcgill/ecse321/townlibrary/dto/",
			"$buildDir/classes/java/main/ca/mcgill/ecse321/townlibrary/model/",
			"$buildDir/classes/java/main/ca/mcgill/ecse321/townlibrary/service/"))
	}
}

task unitTest(type: Test) {
	useJUnitPlatform()

	filter {
		includeTestsMatching "ca.mcgill.ecse321.townlibrary.TownLibraryApplicationTests"
		includeTestsMatching "ca.mcgill.ecse321.townlibrary.dto.*"
		includeTestsMatching "ca.mcgill.ecse321.townlibrary.service.*"
	}

	finalizedBy jacocoUnitTestReport
}

task jacocoIntegrationTestReport(type: JacocoReport) {
	reports { html.required = true }
	afterEvaluate {
		executionData(file("$buildDir/jacoco/integrationTest.exec"))
		sourceDirectories.setFrom(project.sourceSets.main.java.srcDirs)
		classDirectories.setFrom(files("$buildDir/classes/java/main/"))
	}
}

task integrationTest(type: Test) {
	useJUnitPlatform()

	filter {
		includeTestsMatching "ca.mcgill.ecse321.townlibrary.TownLibraryApplicationTests"
		includeTestsMatching "ca.mcgill.ecse321.townlibrary.controller.*"
	}

	finalizedBy jacocoIntegrationTestReport
}